order = 115792089210356248762697446949407573529996955224135760342422259061068512044369

# replace hs, rs and ss with the output of go.py

hs = [91540632801478888280340210210644716856260723107958406907611108488803733983372, 38323298859422985482284605923296760897661562734404057425340709717857763589070, 38323298859422985482284605923296760897661562734404057425340709717857763589070, 49271855676953904875517825578629176664197902060254391201870778427987178681082, 2855169788872863614196540138600839491097795258097157510770668528053257499759, 62996318185106527635673679646518232430415287352887140411353544743679531800705, 38323298859422985482284605923296760897661562734404057425340709717857763589070, 2855169788872863614196540138600839491097795258097157510770668528053257499759, 38323298859422985482284605923296760897661562734404057425340709717857763589070, 2855169788872863614196540138600839491097795258097157510770668528053257499759, 88661895932740776466237783130297451096881673347461533244979747003845906020415]
rs = [19142325646400372956597235907407063121660539779284720616912308386436487402633, 64621783454051359729720424583708248387686240585609515668417852603130634344586, 76502407462851154508875716017247982772887318278242247366317128796640692493052, 106410977652594708352630261687025814777221397990792280588286833441114842974160, 13429057413128321906728987714082518007887758061530711460637859703576914925757, 84884701477447883645313721670851056661857797378608489770250845467966651431442, 73608580812420264798287436298948944397031602411557183053924987569587290001870, 112402502528654950188656734760772415390493721176057031563509969335193739432540, 96761336657378020785655794002280636390948985257648589122306937884141739173938, 85347169927089291828981581623251987662000282484817015499123415665586438861792, 62536232694070913531683206603723733072211991192932012388522683877049825838035]
ss = [115465666006119352733002809087196065170822297579443347275602936188942100291485, 100518219396557984596961651474693048996030323985705547455219902554973189362465, 64149178954904112934215497663689533102150044745133259096867767073083392417672, 47331718063411569515475079554260136481325929673604204019845036972769308296390, 19923037492705113329486601470390462738246170745250067001089495605827142457131, 51044559645908340820842634636872552265873997409006307715678534422554663845742, 50371596706618785480382842357565050632718598030942673890118337411199730616343, 13326020825224561656321353156654693892089363525983824833017928852518962189004, 16173389946249865413570402793297555935802414316788813039013911263384552175748, 50726714325673004736833096027340951947495097947709831401924396576024399652224, 37072109896542986732967289613932489303550004157738490567514538406359641753674]

def modinv(a, m):
    return a.inverse_mod(m)

def recover_private_key(hs, rs, ss):
    num_messages = len(hs)

    last_h = hs[-1]
    last_r = rs[-1]
    last_s = ss[-1]

    last_r_last_s_inv = last_r * modinv(last_s, order)
    last_h_last_s_inv = last_h * modinv(last_s, order)

    matrix = Matrix(QQ, num_messages + 2, num_messages + 2)

    for i in range(num_messages):
        matrix[i, i] = order

    for i in range(num_messages):
        x0 = (rs[i] * modinv(ss[i], order)) - last_r_last_s_inv
        x1 = (hs[i] * modinv(ss[i], order)) - last_h_last_s_inv
        matrix[num_messages + 0, i] = x0
        matrix[num_messages + 1, i] = x1

    matrix[num_messages + 0, i + 1] = 2**(256 - 96) // order
    matrix[num_messages + 0, i + 2] = 0
    matrix[num_messages + 1, i + 1] = 0
    matrix[num_messages + 1, i + 2] = 2**(256 - 96)

    new_matrix = matrix.LLL(early_red=True, use_siegel=True)

    keys = []
    for row in new_matrix:
        diff = row[0]
        key = ((last_s * hs[0]) - (ss[0] * last_h) - (ss[0] * last_s * diff))
        key *= modinv((last_r * ss[0]) - (rs[0] * last_s), order)
        key = key % order
        if key not in keys:
            keys.append(key)

    return keys

keys = recover_private_key(hs, rs, ss)

print(keys[1]) # use 2nd value
